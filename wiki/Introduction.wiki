#summary Introduction to the GNU Oflox package
#labels Featured,Phase-Requirements
#sidebar SideBarGlobal

= Introduction =

Add your content here.


= Details =

= Software requirements =

In order for GNU Oflox to work properly, it requires
  * GNU Octave 2.0 or higher 
  * A GNU/Linux compatible Operating System
  * A mighty *[http://www.ctan.org/ LaTeX]* distribution (for the commands *latex* and *dvipdf*)
  * The powerful *dot* program from [http://www.graphviz.org/ graphviz]

= Networks =
The problems (networks) to be solved are specified in [Dcmef DIMACS Challenge Min Extended format, for more information on this topic clic here.] 

= Instalation =

Here we will discuss how to install and load this package. First you need to grab the most recent copy of this package, *gnuoflox-x.y.z-tar.gz*, and save it to the /tmp directory.

*Note:* the *x*, *y* and *z* in *gnuoflox-x.y.z-tar.gz* refer to the version numbers, for example, *gnuoflox-1.0.2-tar.gz*.

== Installing the package ==

To install the package open a console and follow these steps:
    # `$ cd /tmp`
    # `$ octave`
    # `octave:1> pkg install gnuoflox-x.y.z-tar.gz`
The package is now installed, but to use it, you need to preaviously load it inside Octave. 

== Loading the package ==

To load the package execute GNU Octave and run the following command 

`pkg load gnuoflox`

The package is then loaded and ready to be used. There are now two new commands available
  # `oflox`, and
  # `ofloxconfig`
these command will be explained shortly.

== Removing the package ==

To uninstall the package, execute GNU Octave and type the folloing command 

`pkg uninstall gnuoflox`

After that, the package will be removed from your system.

== Upgrading to a newer version ==
Say you have installed GNU Oflox version 1.0.1 but there is a more recent one, version 1.0.2, in order to upgrade you first need to uninstall version 1.0.1 and then install the version 1.0.2 as as described above.

= Using GNU Oflox =
Here we introduce the usage of the package through and example.

== Commands available and syntax ==
Once loaded the package in Octave, there are two commands available
  # `oflox()`
  # `ofloxconfig()`

=== oflox ===
This is the main command of the GNU Oflox packages, it is an implementation of the Simplex MCF, it's syntax is

`[Z, X, it, it0] = oflox(filename, configuration);`

the `oflox` command requires *only* one parameter, `filename`, the variable specifying the path to `filename.min` that contains the problem (network) to be solved in [http://lpsolve.sourceforge.net/5.5/DIMACS.htm DIMACS Challenge MIN format]. Extra configuration parameters can be customized via the configuration variable. This commands returns four variables 

  * `Z` the cost of the optimal solution,
  * `X` the flows vector
  * `it` number of iterations required to find the optimal solution
  * `it0` number of iterations required to find a starting feasable solution in the case of using FASE I.  

=== ofloxconfig ===
This is an auxiliary command used to configure the behaviour of the `oflox` command, it's syntax is very basic:

`configuration = ofloxconfig;`

The command returns the oflox-config structure:
{{{
configuration = 
{
  sol0 = 0
  FASE1 = 0
  BIGM =  1
  latex = 0
  aname = noname
  scale =  0.50000
  lang = en
  color_arc = #000000
  color_l = #8D0000
  color_u = #00C000
  color_art = #FF6A00
  color_thr = #AAAAFF
  color_pot = #DA03D7
  show_thread = 0
  show_depth = 0
  compiledvi = 0
  it_info = -1
}
}}}

Now will follow a brief description of each element of the structure:
|| *Element* || *Description* ||
|| *configuration.sol0*  ||    Boolean value indicating wether to use or not the initial feaseble solution defined in ``filename''. Defaults to false.||
|| *configuration.FASE1* ||    Boolean value indicating wether the problem should be solved using FASE 1 / FASE 2. Defaults to false.||
|| *configuration.BIGM*  ||    Boolean value indicating wether the problem should be solved using Big M. Defaults to true.||
|| *configuration.latex* ||    Boolean value indicating wether to output latex code or not. Default to false.||
|| *configuration.compiledvi* || Boolean value indicating wether to compile to DVI and PDF the \LaTeX generated source. This switch is only relevant is configuration.latex is true.||
|| *configuration.aname* ||    String specifying the latex output file pattern. Default to 'noname'.||
|| *configuration.scale* ||    float specifying the scale factor of the dot generated graphs used by `\includegraphics[scale=0.5]{...}`. This switch is only used if configuration.latex is true. Default to '0.5'.||
|| *configuration.lang* ||     Two coded caracters specifying the latex output language. Languages currently supported are:||
|| ||      English ``en'' (default)||
|| ||      Spanish ``es''||
|| *configuration.color_arc* || The color of the arcs in HTML coded color. Defaults to black (#000000).||
|| *configuration.color_l*  || The color of arcs in lower bound in HTML coded color. Defaults to red (#8D0000).||
|| *configuration.color_u* ||  The color of arcs in upper bound in HTML coded color. Defaults to green (#00C000).||
|| *configuration.color_art* || The color of artificial arcs in HTML coded color. Defaults to orange (#FF6A00).||
|| *configuration.color_thr* || The color of the THREAD array (when displayed by configuration.show_thread=true). Default to blue (#AAAAFF).||
|| *configuration.color_pot* || The color of the arcs that enters and leaves the tree on the same iteration. Defaults to magenta (#DA03D7).||
|| *configuration.show_thread* || Boolean value specifying wether to display the thread array on the tree graph. Defaults to false.||
|| *configuration.show_depth* || Boolean value specifying wether to display the depth array on the tree graph. Defaults to false.||
|| *configuration.it_info* ||  This switch indicates that the information of a specific iteration is desired. The iteration information is displayed in DIMACS min extended format ready to be included in a DIMACS min extended file. Once displayed the information the iterations are stopped. If the value is less than 0 then no information is displayed. Defaults to -1.||

== Usage ==
For starters, let solve a simple network that is provided with the package. The network is described in [http://lpsolve.sourceforge.net/5.5/DIMACS.htm DIMACS Challenge MIN format] in the file

`~/octave/gnuoflox-x.y.z/doc/nets/pfmc300.min`

Start Octave and write:

`pkg load gnuoflox`
In order to load the GNU Oflox package

`[ Z X it it0 ] = oflox("~/octave/gnuoflox-x.y.z/doc/nets/pfmc300.min")`
To start solving the problem, after solving it, the result is
{{{
Z =  4
X =

   0
   3
   1
   1
   4
   3
   4
   3

it =  6
it0 = 0
}}}
indicating that the problem's objective optimum value is 4 units and can be achieved by setting each arc's flow as indicated by the vector X and required 6 Simplex FMC iterations and 0 FASE I iterations (this is because the problem was solved using Big-M method).


Now that we are experts using GNU oflox, let's use some more advanced features. 
[CompleteExample Click here to view a more complete example].